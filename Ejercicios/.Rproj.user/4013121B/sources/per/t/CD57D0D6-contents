---
title: "R Notebook Ejercicio 1
"
output: html_notebook
---

This is an [R Markdown](http://rmarkdown.rstudio.com) Notebook. When you execute code within the notebook, the results appear beneath the code. 

Try executing this chunk by clicking the *Run* button within the chunk or by placing your cursor inside it and pressing *Ctrl+Shift+Enter*. 
```{r}
library(glue) #para poder armar fácil los strings
```


```{r}
print (paste('state x77 es de clase', class(state.x77)))
print (paste('state x77 es de typeof', typeof(state.x77)))
print (paste('state x77 es de mode', mode(state.x77)))
df <- data.frame(state.x77);
```

```{r}
head(df)
```


```{r}
numf <- function(num, dec=0) {
  return(format(round(num, dec), big.mark = ".", decimal.mark = ",", nsmall = dec))
}
```
1:

```{r EJ1.1}
# ¿Cuál es la población total de Estados Unidos?
ptUsa <- sum(df$Population)*1000
print(glue("USA tiene {numf(ptUsa)} habitantes"))
 
# ¿Cuál es la media de la expectativa de vida?
mediaVida <- mean(df$Life.Exp)
print(glue("USA tiene {numf(ptUsa)} habitantes"))print(glue("La media de vida es de {numf(mediaVida, 1)} años"))
# 
# ¿Cual es la mediana del ingreso en pesos argentinos?
medianaIngreso <- median(df$Income)*1000
print(glue("La mediana de ingreso en ARS (a 1000ARS/USD) es de {numf(medianaIngreso)}"))

```

```{r EJ1.2}
# Crear un dataset df_indice solo con las columnas de porcentaje de analfabetismo sobre población (Illiteracy) y tasa de homicidios por 100.000 habitantes (Murder).
df_indice <- df[, c('Illiteracy', 'Murder')]
# 
# Crear una nueva variable ilit_murd que contenga la suma de los valores de ambas variables del dataset.
df_indice$ilit_murd <- df_indice$Illiteracy+df_indice$Murder
# 
# Encontrar los valores máximos y mínimos de esta nueva variable.
min_ilit_murd <- min(df_indice$ilit_murd)
print (glue("ilit_murd está entre {min_ilit_murd} y {max_ilit_murd}"))
```
3) Objetos
```{r EJ1.3}
# Crear un VALOR llamado OBJETO definido como el resultado de la suma: 5+6
OBJETO <- 6+6

# Crear un VECTOR VEC0 que contenga una muestra aleatoria de números del 1 al 10.
VEC0 <- sample(0:10, size = 10, replace = TRUE)

# Crear 3 vectores ( VEC1, VEC2, VEC3) que sean transformaciones del anterior consistentes en multiplicar por 2, elevar al cuadrado y restarle 2, respectivamente.
VEC1 <- VEC0 * 2
VEC2 <- VEC0 ** 2
VEC3 <- VEC0 - 2
VEC0
VEC1
VEC2
VEC3

 
# 
# Crear 3 vectores con la misma cantidad de elementos que VEC0, pero con variables string (texto) ( VEC4, VEC5, VEC6). Hint: usar la funcion rep() en los casos que se quiera repetir un caracter.
#
VEC4 <- paste(rep("VEC", length(VEC0)), VEC1)
VEC5 <- paste(rep("VEC", length(VEC0)), VEC2)
VEC6 <- paste(rep("VEC", length(VEC0)), VEC3)
VEC4
VEC5
VEC6
# 
# Crear un dataframe DFRAME como combinación de todos los vectores creados previamente.
DFRAME <- data.frame(VEC0, VEC1, VEC2, VEC3, VEC4, VEC5, VEC6)
DFRAME

# 
# Crear una lista LA_LISTA con el OBJETO creado en el punto a), alguno de los vectores y el DFRAME del punto e).
# 
LA_LISTA=list(OBJETO, VEC3, DFRAME)
LA_LISTA

```

4- Loops

```{r EJ1.4}
# 
# 
# 
# a- Para todos los valores del vector VEC0, imprimir mediante un loop el triple de dichos valores.
for (elem in VEC0) {
  print (elem*3)
}
#
# b- Armar un loop que itere sobre los valores únicos de la variable VEC6 del dataframe DFRAME e imprima un texto que combine el valor de VEC6 y de VEC0.
unicos=unique(DFRAME$VEC6)
for (valor in unicos){
  print ("No entiendo lo que piden que haga. Qué tiene que ver el valor de Vec0 con los valores únicos de Vec6?")
  
}

#c- Reescribir el VEC1 del DATAFRAME para que sus elementos sean: el doble de VEC_0 cuando éste sea mayor a 2 e iguales a VEC_0 para el resto de los casos. Hint: usar la función ifelse()

DFRAME$VEC1 <- ifelse(DFRAME$VEC0 > 2, DFRAME$VEC0 * 2, DFRAME$VEC0)
DFRAME
# notar que lo hace elemento a elemento...
#mirar eso:
ifelse(DFRAME$VEC0>2, TRUE, FALSE)


```

```{r EJ1.5}
#5) Funciones
#a Crear una función llamada Hola_Mundo que imprima el texto “Hola mundo”
hm <- function(){
  print ("Hola mundo")
}
hm()

#b Crear una función Sumatoria_enteros que devuelva la sumatoria de los numeros enteros comprendidos entre 1 y un parametro x a definir. Es decir, una función Sumatoria_enteros(x) que devuelva la sumatoria de los enteros de 1 a x.

suma_hasta <- function(x){

  return (sum(1:x))
  }
suma_hasta(3)

#c Crear una función primer_elem_matriz cuyo parámetro/input X sea una matrix y que devuelva la dimensión de la matriz en cuestión y un texto que diga “El primer elemento es par” en caso de que así lo fuera o “El primer elemento no es par” en caso contrario. Evaluar la función creada para el dataset DFRAME.
primer_elem_matriz <- function(X){
  dimension <- dim(X)
  print (glue("La dimensión es {dimension}"))
  primer_elemento=X[1, 1]
  if (primer_elemento %% 2==0) {           
    print ("El primer elemento es par")
  }
  else {
    print ("El primer elemento no es par")
  }
}
A <- matrix(data = (1:6), nrow = 2, ncol = 3)
B <- matrix(data = (2:7), nrow = 2, ncol = 3)

primer_elem_matriz(A)
primer_elem_matriz(B)

```





Add a new chunk by clicking the *Insert Chunk* button on the toolbar or by pressing *Ctrl+Alt+I*.

When you save the notebook, an HTML file containing the code and output will be saved alongside it (click the *Preview* button or press *Ctrl+Shift+K* to preview the HTML file).

The preview shows you a rendered HTML copy of the contents of the editor. Consequently, unlike *Knit*, *Preview* does not run any R code chunks. Instead, the output of the chunk when it was last run in the editor is displayed.
